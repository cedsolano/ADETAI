import { config, validateConfig } from "./envConfig";

interface GeminiRequest {
  contents: {
    parts: {
      text: string;
    }[];
  }[];
}

interface GeminiResponse {
  candidates: {
    content: {
      parts: {
        text: string;
      }[];
    };
  }[];
}

export interface GenerateContentParams {
  prompt: string;
  format: "poem" | "essay";
  tone: string;
  style: string;
  wordCount: number;
  language: "English" | "Tagalog" | "Korean" | "Japanese" | "Spanish";
}

export const explainWord = async (
  word: string,
  language: string = "English",
  context?: string,
): Promise<string> => {
  try {
    validateConfig();

    const prompt = `Explain the word "${word}" in ${language}. ${context ? `Context: "${context}"` : ""}

Provide a clear, concise explanation that includes:
1. The meaning/definition of the word
2. Part of speech (noun, verb, adjective, etc.)
3. A simple example sentence using the word
4. If the word has multiple meanings, mention the most common ones

Keep the explanation simple and easy to understand. Respond in ${language}.`;

    const requestBody: GeminiRequest = {
      contents: [
        {
          parts: [{ text: prompt }],
        },
      ],
    };

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${config.geminiApiKey}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestBody),
      },
    );

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Gemini API error: ${response.status} - ${errorText}`);
    }

    const data: GeminiResponse = await response.json();

    if (!data.candidates || data.candidates.length === 0) {
      throw new Error("No explanation generated by Gemini API");
    }

    return data.candidates[0].content.parts[0].text;
  } catch (error) {
    console.error("Error explaining word:", error);
    throw error;
  }
};

export const generateContent = async (
  params: GenerateContentParams,
): Promise<string> => {
  try {
    validateConfig();

    const { prompt, format, tone, style, wordCount, language } = params;

    const detailedPrompt = `Write a ${format} in ${language} about "${prompt}" using the following preferences:
- Format: ${format}
- Tone: ${tone}
- Style: ${style}
- Target Word Count: around ${wordCount} words

${
  format === "poem"
    ? `Create a well-formatted poem with:
- Clear line breaks and stanza divisions
- Proper spacing between verses
- Consistent rhythm and meter where appropriate
- Use poetic devices like metaphor, imagery, and symbolism
- Express the theme emotionally and creatively
- Format with proper line breaks (use \n for new lines)
- Separate stanzas with double line breaks (\n\n)`
    : `Create a well-structured essay with:
- Clear introduction with thesis statement
- Well-developed body paragraphs with topic sentences
- Smooth transitions between paragraphs
- Strong conclusion that reinforces the main points
- Proper paragraph breaks (use \n\n between paragraphs)
- Support ideas with reasoning, examples, or explanation
- Maintain formal essay structure throughout`
}

IMPORTANT: Use proper formatting with line breaks. For poems, use \n for line breaks within stanzas and \n\n between stanzas. For essays, use \n\n between paragraphs. Make the content visually appealing and easy to read.`;

    const requestBody: GeminiRequest = {
      contents: [
        {
          parts: [{ text: detailedPrompt }],
        },
      ],
    };

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${config.geminiApiKey}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestBody),
      },
    );

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Gemini API error: ${response.status} - ${errorText}`);
    }

    const data: GeminiResponse = await response.json();

    if (!data.candidates || data.candidates.length === 0) {
      throw new Error("No content generated by Gemini API");
    }

    return data.candidates[0].content.parts[0].text;
  } catch (error) {
    console.error("Error generating content:", error);
    throw error;
  }
};
